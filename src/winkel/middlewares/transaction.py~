import typing as t
from transaction import TransactionManager
from winkel.pipeline import Handler, Middleware
from horseman.response import Response
from functools import wraps


TransactionFactory = t.Callable[[], TransactionManager]


def transaction_factory(context) -> TransactionManager:
    manager = TransactionManager(explicit=True)
    manager.begin()
    return manager


class Transactional(Middleware):

    def install(self, app, order: int):
        app.services.add_scoped_by_factory(transaction_factory)
        app.pipeline.add(self, order)

    def __call__(self, handler: Handler) -> Handler:

        @wraps(handler)
        def transaction_middleware(request):
            try:
                response = handler(request)
                txn = request.get(TransactionManager)
                if txn.isDoomed() or (
                        isinstance(response, Response)
                        and response.status >= 400):
                    txn.abort()
                else:
                    txn.commit()
                return response
            except Exception:
                txn = request.get(TransactionManager)
                txn.abort()
                raise

        return transaction_middleware
